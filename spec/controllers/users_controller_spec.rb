require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let!(:user) { FactoryGirl.create(:user)}


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.

  describe 'GET show' do
    it 'assigns the requested user as @user' do
      get :show, {id: user.id}
      expect(assigns(:user)).to eq(user)
    end
  end

  describe 'GET new' do
    it 'assigns a new user as @user' do
      get :new
      expect(assigns(:user)).to be_a_new(User)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a cart for user upon user creation' do
        UserMailer.stubs(:activation_email)
        cart = mock('cart')
        Cart.stubs(:new).returns(cart)
        cart.expects(:save).once
        post :create, {:user => FactoryGirl.attributes_for(:mike)}
      end

      it 'creates a new User' do
        UserMailer.stubs(:activation_email)
        expect {
          post :create, {:user => FactoryGirl.attributes_for(:mike)}
        }.to change(User, :count).by(1)
      end

      it 'assigns a newly created user as @user' do
        UserMailer.stubs(:activation_email)
        post :create, {user: FactoryGirl.attributes_for(:mike)}
        expect(assigns(:user)).to be_a(User)
      end

      it 'redirects to home page' do
        UserMailer.stubs(:activation_email)
        post :create, {user: FactoryGirl.attributes_for(:mike)}
        expect(response).to redirect_to(home_path)
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved user as @user' do
        post :create, {user: FactoryGirl.attributes_for(:user)}
        expect(assigns(:user)).to be_a_new(User)
      end

      it 're-renders the new template' do
        post :create, {user: FactoryGirl.attributes_for(:user)}
        expect(response).to render_template('new')
      end
    end
  end

  describe 'Activation'do
    it 'activates user account' do
      post :activate, { username: user.username, token: user.activation_token }
      expect(User.find_by_username(user.username).active).to be true
    end

    it 'resends activation email' do
      UserMailer.stubs(:resend_activation_email)
      get :resend_activation
      expect(response).to redirect_to(home_path)
    end
  end


  describe 'DELETE destroy' do
    it 'destroys the requested user' do
      expect { delete :destroy, { id: user.id } }
             .to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      delete :destroy, {id: user.id}
      expect(response).to redirect_to(users_url)
    end
  end

  describe 'activate' do
    it 'assigns requested user as user' do
      get :activation, {id: user.id}
      expect(assigns(:user)).to be_a(User)
    end
  end

end
